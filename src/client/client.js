const publicVapidKey = "BOUmVvzTvdtLU-j0kYSEV-UFtC5C8Ol1FUhMPm6kXwD3metSrG0S72O4cspVw1-6QBHUk1fzCvbyzKvLRC8GsEI";

document.getElementById("notification").onclick = send;

// Register SW, Register Push, Send Push
async function send() {
  // This if statement checks if the serviceWorker property is available in the navigator object, indicating that the browser supports service workers
  // navigator is an object in the web browser environment that provides access to various browser-related information and features,
  // and in this specific case, it's used to interact with service workers and manage push notifications.
  if ("serviceWorker" in navigator) {
    // check if the browser supports service workers

    // Register the service worker script. Service workers are like proxys that sit between the web browser and the web application, they run in the background
    // and helps out with managing the push notification. the .register method returns a promise that resolves witrh a serviceWorkerRegistration object
    console.log("Registering service worker...");

    const register = await navigator.serviceWorker.register("worker.js", {
      scope: "/",
    });

    console.log("Service Worker Registered...");

    // The register object from previous code contains the serviceWorkerRegistration object which has the pushManager as one of its instance properties.
    // The subscribe method returns a subscription object. This object contains the endpoint (generated by the browser) to which the push notifications should 
    // be sent, it is unique to the users device and browser.
    console.log("Registering Push...");
    const subscription = await register.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: urlBase64ToUint8Array(publicVapidKey),
    });
    console.log(`Push Registered...\n ${subscription.endpoint}`);

    // Send Push Notification. Sends the subscription object to the server
    console.log("Sending Push...");
    await fetch("/subscribe", {
      method: "POST",
      body: JSON.stringify(subscription),
      headers: {
        "content-type": "application/json",
      },
    });
    console.log("Push Sent...");
  } else {
    console.log("Service worker not available..");
  }
}
function urlBase64ToUint8Array(base64String) {
  console.log("base64");
  const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
  const base64 = (base64String + padding).replace(/\-/g, "+").replace(/_/g, "/");

  const rawData = window.atob(base64);
  const outputArray = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  console.log("base6444");

  return outputArray;
}

// export { send };
